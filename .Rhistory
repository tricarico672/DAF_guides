mean(sample_1)
(t_test <- t.test(sample_1, sample_2, alternative = "greater"))
t_test$p.value
library(MASS)
MASS::Animals
library(MASS)
animals <- MASS::Animals
regression <- lm(brain~body, animals)
summary(regression)
library(MASS) #<1>
(animals <- MASS::Animals) #<2>
regression <- lm(brain~body, animals) #<1>
summary(regression) #<2>
library(readr)
rawdata <- read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
View(rawdata)
select(rawdata,Date) # see dates
select(rawdata, Date) # see dates
library(fpp3)
select(rawdata, Date) # see dates
dplyr::select(rawdata, Date) # see dates
prisonData <- mutate(rawdata, Quarter = yearquarter(Date))
View(prisonData)
temp <- select(prisonData, -Date)
temp <- dplyr::select(prisonData, -Date)
View(temp)
temp[1,1]
temp[1,]
temp[,1]
prison <- as_tsibble(temp, key = c(State, Gender, Legal, Indigenous), index = Quarter)
View(prison)
autoplot(prison, .vars=Count)
pr_short <- filter_index(prison, "2015 Q1", "2016 Q2") # 2015 Q1 and 2016 Q2 only
View(pr_short)
prQ1 <- filter(prison,quarter(Quarter) == 1) # observations from Q1 only
View(prQ1)
ansett
view(ansett)
melsyd_economy0 <- filter(ansett, Airports == "MEL-SYD",
Class == "Economy")
melsyd_economy <- mutate(melsyd_economy0,Passengers = Passengers/1000) # replaces the Passengers values
autoplot(melsyd_economy, Passengers) +
labs(title = "Ansett airlines economy class",
subtitle = "Melbourne-Sydney", y = "Passengers ('000)")
autoplot(melsyd_economy, .vars=Passengers) +
labs(title = "Ansett airlines economy class",
subtitle = "Melbourne-Sydney", y = "Passengers ('000)")
autoplot(melsyd_economy, Passengers) +
labs(title = "Ansett airlines economy class",
subtitle = "Melbourne-Sydney", y = "Passengers ('000)")
autoplot(melsyd_economy, Passengers) +
labs(title = "Ansett airlines economy class",
subtitle = "Melbourne-Sydney", y = "Passengers ('000)",
x="Week")
View(melsyd_economy)
PBS
filter(PBS, ATC2 == "A10")
A10all <- filter(PBS, ATC2 == "A10") # filter() selects rows
A10 <- select(A10all, Month, Concession, Type, Cost) # select() selects columns
A10 <- dplyr::select(A10all, Month, Concession, Type, Cost) # select() selects columns
PBS
filter(PBS, ATC2 == "A10")
A10all <- filter(PBS, ATC2 == "A10") # filter() selects rows
A10 <- dplyr::select(A10all, Month, Concession, Type, Cost) # select() selects columns
TotalC <- summarise(A10, TotalC=sum(Cost))
a10 <- mutate(TotalC,Cost=TotalC/1e6) # add a column with a new variable
autoplot(a10, Cost) +
labs(y = "$ (millions)", title = "Australian antidiabetic drug sales")
library(tidyquant)
GOOGdata <- tq_get("GOOG",get="stock.prices",from="2017-01-01",to="2023-08-31")
View(GOOGdata)
temp <- select(GOOGdata,"date","close")
temp <- dplyr::select(GOOGdata,"date","close")
View(temp)
GOOGtsib <- as_tsibble(temp, index = date)
GOOGtsib = mutate(GOOGtsib,close,diff=close-lag(close))
GOOGtsib <- mutate(GOOGtsib,close,diff=close-lag(close))
GOOGtsib <- mutate(GOOGtsib,close,diff=close-lag(close))
View(GOOGtsib)
GOOGtsib <- mutate(GOOGtsib,diff=close-lag(close))
GOOGtsib <- mutate(GOOGtsib,diff=close-lag(close))
library(gridExtra)
p231 <- autoplot(as_tsibble(fma::hsales, index = date)) + # sales of new one-family houses, USA
ggtitle("Sales of new one-family houses, USA") +
ylab("millions") + xlab("Year")
p232 <- autoplot(as_tsibble(fma::ustreas)) +  # US treasury bill contracts
ggtitle("US treasury bill contracts") +
ylab("Number") + xlab("Day")
p233 <- autoplot(select(aus_production, Electricity)) + # the "Details" section in the help reports a wrong frequencey            # Australian quarterly electricity production
ggtitle("Australian quarterly electricity production") +
ylab("billion kWh") + xlab("Quarter")
p234 <- autoplot(GOOGtsib,diff) +    # Daily closing stock prices of Google Inc
ggtitle("Daily differences of Google closing prices") +
ylab("Change in prices") + xlab("Day")
grid.arrange(p231,p232,p233,p234,nrow=2)
p233 <- autoplot(select(aus_production, Electricity)) + # the "Details" section in the help reports a wrong frequencey            # Australian quarterly electricity production
ggtitle("Australian quarterly electricity production") +
ylab("billion kWh") + xlab("Quarter")
p233 <- autoplot(dplyr::select(aus_production, Electricity)) + # the "Details" section in the help reports a wrong frequencey            # Australian quarterly electricity production
ggtitle("Australian quarterly electricity production") +
ylab("billion kWh") + xlab("Quarter")
p234 <- autoplot(GOOGtsib,diff) +    # Daily closing stock prices of Google Inc
ggtitle("Daily differences of Google closing prices") +
ylab("Change in prices") + xlab("Day")
grid.arrange(p231,p232,p233,p234,nrow=2)
var <- c(1,1,1,2,2,2,3,4,5,6,7,8,9)
var_skewed <- c(1,1,1,1,2,3,4,10000000) #<1>
mean(var) #<2>
mean(var_skewed)
hist(var, main = "Non-skewed") #<1>
abline(v = mean(var), col="red", lwd=3) #<2>
hist(var_skewed, breaks = 30)
abline(v = mean(var_skewed), col="red", lwd=3)
median(var)
median(var_skewed)
hist(var, main = "Non-skewed")
abline(v = median(var), col="red", lwd=3)
hist(var_skewed, breaks = 30)
abline(v = median(var_skewed), col="red", lwd=3)
table(var)
table(var_skewed)
var(var) #<1>
var(var_skewed) #result is 12500000000000
sd(var)
sd(var_skewed)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100,
replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(0,1,2,3,4,5,6), freq = F,
labels = T, ylim = c(0,.3))
x <- seq(-4,4,.001)
y <- dnorm(x)
plot(x,y, main = "The Standard Normal Distribution")
abline(v=mean(x), col = "red", lwd=2)
set.seed(128) #<1>
pop_1 <- seq(180,195) #<2>
pop_2 <- seq(165,180) #<3>
sample_1 <- sample(pop_1, 100, replace = T) #<4>
sample_2 <- sample(pop_2, 100, replace = T) #<5>
hist(sample_1)
abline(v=mean(sample_1), col="red", lwd=3)
hist(sample_2, xlim = c(164,180))
abline(v=mean(sample_2), col="red", lwd=3)
(t_test <- t.test(sample_1, sample_2, alternative = "greater"))
t_test$p.value
library(MASS) #<1>
(animals <- MASS::Animals) #<2>
regression <- lm(brain~body, animals) #<1>
summary(regression) #<2>
var <- c(1,1,1,2,2,2,3,4,5,6,7,8,9)
var_skewed <- c(1,1,1,1,2,3,4,10000000) #<1>
mean(var) #<2>
mean(var_skewed)
hist(var, main = "Non-skewed") #<1>
abline(v = mean(var), col="red", lwd=3) #<2>
hist(var_skewed, breaks = 30)
abline(v = mean(var_skewed), col="red", lwd=3)
median(var)
median(var_skewed)
hist(var, main = "Non-skewed")
abline(v = median(var), col="red", lwd=3)
hist(var_skewed, breaks = 30)
abline(v = median(var_skewed), col="red", lwd=3)
table(var)
table(var_skewed)
var(var) #<1>
var(var_skewed) #result is 12500000000000
sd(var)
sd(var_skewed)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100,
replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(0,1,2,3,4,5,6), freq = F,
labels = T, ylim = c(0,.3))
x <- seq(-4,4,.001)
y <- dnorm(x)
plot(x,y, main = "The Standard Normal Distribution")
abline(v=mean(x), col = "red", lwd=2)
set.seed(128) #<1>
pop_1 <- seq(180,195) #<2>
pop_2 <- seq(165,180) #<3>
sample_1 <- sample(pop_1, 100, replace = T) #<4>
sample_2 <- sample(pop_2, 100, replace = T) #<5>
hist(sample_1)
abline(v=mean(sample_1), col="red", lwd=3)
hist(sample_2, xlim = c(164,180))
abline(v=mean(sample_2), col="red", lwd=3)
(t_test <- t.test(sample_1, sample_2, alternative = "greater"))
t_test$p.value
library(MASS) #<1>
(animals <- MASS::Animals) #<2>
regression <- lm(brain~body, animals) #<1>
summary(regression) #<2>
library(ggplot2)
ggplot(animals, aes(x=body, y=brain)) +
geom_point() +
geom_smooth(method="lm")
library(ggplot2)
ggplot(animals, aes(x=body, y=brain)) +
geom_point() +
geom_smooth(method="lm", se=F)
rm(list=ls())
library(fpp3)
Sys.setlocale(locale = "English")
# creating an annual time series in a tsibble format
c(1,2,3)
y <- tsibble(
Year = 2015:2019,
Observation = c(123, 39, 78, 52, 110),
index = Year
)
# creating a tibble
z <- tibble('Month' = c('2019 Jan','2019 Feb','2019 Mar','2019 Apr','2019 May'),
'Observation' = c(50,23,34,30,25))
# converting to a tsibble
z1 <- mutate(z, Month = yearmonth(Month))
z1ts <- as_tsibble(z1, index = Month)
# alternative syntax
z1b <- z |>
mutate(Month = yearmonth(Month)) |>
as_tsibble(index = Month)
# plotting
autoplot(z1ts,.vars=Observation) + labs(x = 'Month') # ok
autoplot(z) # error
View(olympic_running)
distinct(olympic_running, Sex)
women100 <- filter(olympic_running, Sex == 'women', Length == '100')
missObs <- filter(women100,is.na(women100$Time)) # find missing values...
women100short <- filter_index(women100,. ~ '1936', '1948' ~ .) # ... remove them ...
autoplot(women100,.vars = Time)
autoplot(women100short,.vars = Time) # ...and interpolate them in the plot
# Replace NA by linear interpolation
# w100exp = fill_gaps(women100short)
# IntM = model(w100exp, naive =
#       ARIMA(Time ~ -1 + pdq(0,1,0) + PDQ(0,0,0)))
# wgInt = interpolate(IntM,w100exp)
# PBS
PBS
filter(PBS, ATC2 == "A10")
A10all <- filter(PBS, ATC2 == "A10") # filter() selects rows
A10 <- select(A10all, Month, Concession, Type, Cost) # select() selects columns
TotalC <- summarise(A10, TotalC=sum(Cost))
a10 <- mutate(TotalC,Cost=TotalC/1e6) # add a column with a new variable
# reading data from a csv file
library(readr)
rawdata <- read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
select(rawdata,Date) # see dates
prisonData <- mutate(rawdata, Quarter = yearquarter(Date))
temp <- select(prisonData,-Date)
prison <- as_tsibble(temp,key = c(State, Gender, Legal, Indigenous), index = Quarter)
# subsetting
pr_short <- filter_index(prison, "2015 Q1", "2016 Q2") # 2015 Q1 and 2016 Q2 only
prQ1 <- filter(prison,quarter(Quarter) == 1) # observations from Q1 only
# Fig. 2.1
melsyd_economy0 <- filter(ansett, Airports == "MEL-SYD",
Class == "Economy")
melsyd_economy <- mutate(melsyd_economy0,Passengers = Passengers/1000) # replaces the Passengers values
autoplot(melsyd_economy, Passengers) +
labs(title = "Ansett airlines economy class",
subtitle = "Melbourne-Sydney", y = "Passengers ('000)")
# Fig. 2.2
autoplot(a10, Cost) +
labs(y = "$ (millions)", title = "Australian antidiabetic drug sales")
# Fig. 2.3
# Get Google prices
library(tidyquant)
GOOGdata <- tq_get("GOOG",get="stock.prices",from="2017-01-01",to="2023-08-31")
temp <- select(GOOGdata,"date","close")
GOOGtsib <- as_tsibble(temp, index = date)
GOOGtsib = mutate(GOOGtsib,close,diff=close-lag(close))
library(gridExtra)
p231 <- autoplot(as_tsibble(fma::hsales, index = date)) + # sales of new one-family houses, USA
ggtitle("Sales of new one-family houses, USA") +
ylab("millions") + xlab("Year")
p232 <- autoplot(as_tsibble(fma::ustreas)) +  # US treasury bill contracts
ggtitle("US treasury bill contracts") +
ylab("Number") + xlab("Day")
p233 <- autoplot(select(aus_production, Electricity)) + # the "Details" section in the help reports a wrong frequencey            # Australian quarterly electricity production
ggtitle("Australian quarterly electricity production") +
ylab("billion kWh") + xlab("Quarter")
p234 <- autoplot(GOOGtsib,diff) +    # Daily closing stock prices of Google Inc
ggtitle("Daily differences of Google closing prices") +
ylab("Change in prices") + xlab("Day")
grid.arrange(p231,p232,p233,p234,nrow=2)
# Figure 2.4
gg_season(a10, Cost, labels = "both") + labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
# Figure 2.5
gg_season(vic_elec, Demand, period = "day") +
theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
# Figure 2.6
gg_season(vic_elec, Demand, period = "week") +
theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
# Figure 2.7
gg_season(vic_elec, Demand, period = "year") +
labs(y="MW", title="Electricity demand: Victoria")
# Figure 2.8
gg_subseries(a10, Cost) +
labs(y = "$ (millions)", title = "Australian antidiabetic drug sales")
# Australian holiday
holitour <- filter(tourism, Purpose == "Holiday")
holigr <- group_by(holitour, State)
holidays <- summarise(holigr,Trips = sum(Trips))
# Figure 2.9
autoplot(holidays, Trips) +
labs(y = "Overnight trips ('000)", title = "Australian domestic holidays")
# Figure 2.10
gg_season(holidays, Trips) +
labs(y = "Overnight trips ('000)", title = "Australian domestic holidays")
# Figure 2.11
gg_subseries(holidays, Trips) +
labs(y = "Overnight trips ('000)", title = "Australian domestic holidays")
# Figure 2.12
autoplot(filter(vic_elec,year(Time) == 2014),Demand) +
labs(y = "GW", title = "Half-hourly electricity demand: Victoria")
# Figure 2.13
autoplot(filter(vic_elec, year(Time) == 2014),Temperature) +
labs(y = "Degrees Celsius",
title = "Half-hourly temperatures: Melbourne, Australia")
# Figure 2.14
ggplot(filter(vic_elec, year(Time) == 2014),
aes(x = Temperature, y = Demand)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)",y = "Electricity demand (GW)")
# Figure 2.15
library(mvtnorm)
rho = 0.99
temp <- rmvnorm(1000,c(0,0),cbind(c(1,rho),c(rho,1)))
Y <- tibble(x = temp[,1],y = temp[,2])
sp <- ggplot(Y, aes(x=x, y=y)) + geom_point()
print(sp)
# Figure 2.17
visitors <- summarise(group_by(tourism, State), Trips = sum(Trips))
ggplot(visitors, aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y") +
labs(title = "Australian domestic tourism", y= "Overnight trips ('000)")
autoplot(visitors) + facet_wrap(vars(State), ncol = 1,
scales = "free_y") + labs(title = "Australian domestic tourism",
x= "Quarter", y= "Overnight trips ('000)")
# to omit titles, use + theme(strip.text.x = element_blank())
# Figure 2.18
library(GGally)
ggpairs(pivot_wider(visitors, values_from=Trips, names_from=State),
columns = 2:9)
# Figure 2.19
recent_production <- filter(aus_production, year(Quarter) >= 2000)
gg_lag(recent_production, Beer, geom = "point") +
labs(x = "lag(Beer, k)")
# correlogram
ACF(recent_production, Beer, lag_max = 9) # better avoid using lag_max
# Figure 2.20
autoplot(ACF(recent_production, Beer)) +
labs(title="Australian beer production")
# Figure 2.21
autoplot(ACF(a10, Cost, lag_max = 48)) +
labs(title="Australian antidiabetic drug sales")
# Figure 2.22
set.seed(30)
y <- tsibble(sample = 1:50, wn = rnorm(50), index = sample)
autoplot(y,wn) + labs(title = "White noise", y = "")
autoplot(ACF(y,wn)) + labs(title = "White noise")
library(gridExtra)
p231 <- autoplot(as_tsibble(fma::hsales, index = date)) + # sales of new one-family houses, USA
ggtitle("Sales of new one-family houses, USA") +
ylab("millions") + xlab("Year")
p232 <- autoplot(as_tsibble(fma::ustreas)) +  # US treasury bill contracts
ggtitle("US treasury bill contracts") +
ylab("Number") + xlab("Day")
p233 <- autoplot(select(aus_production, Electricity)) + # the "Details" section in the help reports a wrong frequencey            # Australian quarterly electricity production
ggtitle("Australian quarterly electricity production") +
ylab("billion kWh") + xlab("Quarter")
p234 <- autoplot(GOOGtsib,diff) +    # Daily closing stock prices of Google Inc
ggtitle("Daily differences of Google closing prices") +
ylab("Change in prices") + xlab("Day")
grid.arrange(p231,p232,p233,p234,nrow=2)
gg_season(a10, Cost, labels = "both") + labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
View(a10)
gg_season(vic_elec, Demand, period = "day") +
theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "day", labels = "right") +
theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "day", labels = "right") +
#theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "day") +
#theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "day") +
theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "day") +
theme(legend.position = "best") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "day") +
#theme(legend.position = "best") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "day") +
theme(legend.position = "best") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, period = "week") +
theme(legend.position = "none") +
labs(y="MW", title="Electricity demand: Victoria")
gg_season(vic_elec, Demand, "day") +
theme(legend.position = "best") +
labs(y="MW", title="Electricity demand: Victoria")
vic_elec
gg_season(vic_elec, Demand, period = "year") +
labs(y="MW", title="Electricity demand: Victoria")
gg_subseries(a10, Cost) +
labs(y = "$ (millions)", title = "Australian antidiabetic drug sales")
gg_subseries(vic_elec, Demand, period = "3m")
gg_subseries(vic_elec, Demand, period = "3y")
tourism
view(tourism)
tourism <- tourism
tourism
304*80
holitour <- filter(tourism, Purpose == "Holiday")
holidays <- summarise(holigr,Trips = sum(Trips))
View(holidays)
tourism %>%
mutate(total_trips = sum(Trips))
write_csv(tourism, "tourism.csv")
autoplot(holidays, Trips) +
labs(y = "Overnight trips ('000)", title = "Australian domestic holidays")
gg_season(holidays, Trips) +
labs(y = "Overnight trips ('000)", title = "Australian domestic holidays")
gg_subseries(holidays, Trips) +
labs(y = "Overnight trips ('000)", title = "Australian domestic holidays")
autoplot(filter(vic_elec,year(Time) == 2014),Demand) +
labs(y = "GW", title = "Half-hourly electricity demand: Victoria")
ggplot(filter(vic_elec, year(Time) == 2014),
aes(x = Temperature, y = Demand)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)",y = "Electricity demand (GW)")
1==1
1==0
view(vic_elec)
ggplot(filter(vic_elec, year(Time) == 2014), aes(x = Temperature, y = Demand)) +
geom_point() +
geom_abline(intercept = 2)
ggplot(filter(vic_elec, year(Time) == 2014), aes(x = Temperature, y = Demand)) +
geom_point() +
geom_abline(intercept = 10)
ggplot(filter(vic_elec, year(Time) == 2014), aes(x = Temperature, y = Demand)) +
geom_point() +
geom_abline(intercept = 10) +
labs(x = "Temperature (degrees Celsius)", y = "Electricity demand (GW)")
ggplot(filter(vic_elec, year(Time) == 2014)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)", y = "Electricity demand (GW)")
ggplot(filter(vic_elec, year(Time) == 2014)) +
geom_point(aes(x = Temperature, y = Demand)) +
labs(x = "Temperature (degrees Celsius)", y = "Electricity demand (GW)")
ggplot(filter(vic_elec, year(Time) == 2014), aes(x = Temperature, y = Demand)) +
geom_point() +
geom_point() +
labs(x = "Temperature (degrees Celsius)", y = "Electricity demand (GW)")
library(mvtnorm)
rho = 0.99
temp <- rmvnorm(1000,c(0,0),cbind(c(1,rho),c(rho,1)))
View(temp)
View(temp)
ggplot(filter(vic_elec, year(Time) == 2014), aes(x = Temperature, y = Demand)) +
geom_point() +
geom_hline(10)
ggplot(filter(vic_elec, year(Time) == 2014), aes(x = Temperature, y = Demand)) +
geom_point() +
geom_hline(aes(x= 10)) +
labs(x = "Temperature (degrees Celsius)", y = "Electricity demand (GW)")
ggplot(filter(vic_elec, year(Time) == 2014), aes(x = Temperature, y = Demand)) +
geom_point() +
geom_hline(aes(10)) +
labs(x = "Temperature (degrees Celsius)", y = "Electricity demand (GW)")
cor(temp[,1], temp[,2])
rm(list=ls())
lin_1 <- seq(1,10)
lin2_2 <- seq(-10,-1)
cor(lin_1, lin2)
lin_1 <- seq(1,10)
lin_2 <- seq(-10,-1)
cor(lin_1, lin_2)
lin_1 <- seq(1,10)
lin_2 <- seq(-1,-10)
cor(lin_1, lin_2)
sq_2 <- lin_1^2
cor(lin_1, sq_2)
sq_2 <- lin_1^3
cor(lin_1, sq_2)
sq_2 <- lin_1^40
cor(lin_1, sq_2)
sq_2 <- lin_1^100
cor(lin_1, sq_2)
sq_2 <- lin_1^99
cor(lin_1, sq_2)
sq_2 <- lin_1^1
cor(lin_1, sq_2)
sq_2 <- lin_1^4
cor(lin_1, sq_2)
sq_2 <- lin_1^2
cor(lin_1, sq_2)
plot(lin_1, sq_2)
summary(lm(sq_2~lin_1))
summary(lm(sq_2~0+lin_1))
