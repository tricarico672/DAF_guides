ggplot(augment(fit_boston), aes(x = Year)) +
geom_line(aes(y = Minutes, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
#  scale_colour_manual(values = c(Data = "black", Fitted = "#D55E00")) +
labs(y = "Megalitres",
title = "Australian quarterly beer production") +
guides(colour = guide_legend(title = "Series"))
gg_tsresiduals(fit_boston)
fit_trends <- model(boston_men, linear = TSLM(Minutes ~ trend()),
exponential = TSLM(log(Minutes) ~ trend()),
piecewise = TSLM(Minutes ~ trend(knots = c(1950, 1980))))
fc_trends <- forecast(fit_trends, h = 10)
# Figure 7.21
autoplot(boston_men, Minutes) +
geom_line(data = augment(fit_trends), aes(y = .fitted,
colour = .model)) +
autolayer(fc_trends, alpha = 0.5, level = 95) +
labs(y = "Minutes", title = "Boston marathon winning times")
select(glance(fit_consMR), adj_r_squared, CV, AIC, AICc, BIC)
select(glance(fit_consMR), adj_r_squared, CV, AIC, AICc, BIC)
glance(fit_consMR)
fit_consBest <- model(us_change,
lm = TSLM(Consumption ~ Income + Savings + Unemployment))
(NewData <- new_data(us_change, 4))
future_scenarios <- scenarios(Increase = mutate(NewData,
Income=1, Savings=0.5, Unemployment=0),
Decrease = mutate(NewData, Income=-1, Savings=-0.5,
Unemployment=0),
names_to = "Scenario")
(future_scenarios <- scenarios(Increase = mutate(NewData,
Income=1, Savings=0.5, Unemployment=0),
Decrease = mutate(NewData, Income=-1, Savings=-0.5,
Unemployment=0),
names_to = "Scenario"))
(fc <- forecast(fit_consBest, new_data = future_scenarios))
fit_trends <- model(boston_men, linear = TSLM(Minutes ~ trend()),
exponential = TSLM(log(Minutes) ~ trend()),
piecewise = TSLM(Minutes ~ trend(knots = c(1950, 1980))))
fc_trends <- forecast(fit_trends, h = 10)
fit_trends <- model(boston_men, linear = TSLM(Minutes ~ trend()),
exponential = TSLM(log(Minutes) ~ trend()),
piecewise = TSLM(Minutes ~ trend(knots = c(1950, 1980))))
(fc_trends <- forecast(fit_trends, h = 10))
autoplot(boston_men, Minutes) +
geom_line(data = augment(fit_trends), aes(y = .fitted,
colour = .model)) +
autolayer(fc_trends, alpha = 0.5, level = 95) +
labs(y = "Minutes", title = "Boston marathon winning times")
report(filter(fc_trends, .model == "piecewise"))
report(filter(fc_trends, .model == piecewise))
report(filter(fit_trends, .model == piecewise))
report(filter(fit_trends, .model == "piecewise"))
(fit_trends <- model(boston_men, linear = TSLM(Minutes ~ trend()),
exponential = TSLM(log(Minutes) ~ trend()),
piecewise = TSLM(Minutes ~ trend(knots = c(1950, 1980)))))
(fc_trends <- forecast(fit_trends, h = 10))
report(fit_trends)
report(filter(fit_trends, .model == "piecewise")
report(filter(fit_trends, .model == "piecewise"))
fit_trends |>
filter(.model == "piecewise")
fit_trends
fit_trends |>
report()
filter(.model == "piecewise")
fit_trends |>
report()
filter(.model == "piecewise")
fit_trends
glance(fit_trends)
glance(fit_trends) %>%
filter(.model == "linear")
report(fit_trends) %>%
filter(.model == "linear")
report(fit_trends) %>%
filter(.model == "linear")
fit_trends %>%
filter(.model == "linear")
fit_trends
fit_trends %>%
select(piecewise)
fit_trends %>%
select(piecewise) %>%
report()
fit_trends <- model(boston_men, linear = TSLM(Minutes ~ trend()),
exponential = TSLM(log(Minutes) ~ trend()),
piecewise = TSLM(Minutes ~ trend(knots = c(1950, 1980))))
fc_trends <- forecast(fit_trends, h = 10)
library(tidyquant)
ge_data <- tq_get("GE", from = "2024-06-01", to = "2024-11-10")
head(ge_data)
View(ge_data)
close_ge <- ge_data %>%
mutate(day = dplyr::row_number()) %>%
select(close, day)
#| output: false
library(tidyquant)
library(fpp3)
close_ge <- ge_data %>%
mutate(day = dplyr::row_number()) %>%
select(close, day)
ge_tsibble <- as_tsibble(close_ge, index = day)
View(ge_tsibble)
train <- ge_tsibble[1:90]
train <- ge_tsibble[1:90,]
test <- ge_tsibble[91:nrow(ge_tsibble),]
series <- read.table("~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/data/series.txt", quote="\"")
names(series) <- "time_series"
View(series)
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/html")
library(quarto)
install.packages("quarto")
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/html")
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/html/hw3")
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/html/html")
library(quarto)
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/html/html")
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/html/HW3.html")
setwd("~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3")
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework3/html/HW3.html")
quarto::quarto_render("HW3.qmd", output_format = "html", output_file = "html/HW3.html")
quarto::quarto_render("HW3.qmd", output_format = "html", output_dir = "html")
library(fpp3)
algeria_economy <- global_economy |>
filter(Country == "Algeria")
algeria_economy |>
autoplot(Exports) +
labs(y = "% of GDP", title = "Exports: Algeria")
library(fpp3)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
fit
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
summary(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
glance(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
glance(fc)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
glance(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
augment(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
summary(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
summarise(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
glance(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
tidy(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
tidy(fit) %>%
select(term)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
tidy(fit) %>%
select(term)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
tidy(fit)
# Estimate parameters
fit <- algeria_economy |>
model(ETS(Exports ~ error("A") + trend("N") + season("N")))
fc <- fit |>
forecast(h = 5)
tidy(fit) %>%
select(term, estimate)
fit <- aus_economy |>
model(
AAN = ETS(Pop ~ error("A") + trend("A") + season("N"))
)
aus_economy <- global_economy |>
filter(Code == "AUS") |>
mutate(Pop = Population / 1e6)
autoplot(aus_economy, Pop) +
labs(y = "Millions", title = "Australian population")
fit <- aus_economy |>
model(
AAN = ETS(Pop ~ error("A") + trend("A") + season("N"))
)
fc <- fit |> forecast(h = 10)
tidy(fit)
aus_economy |>
model(
`Holt's method` = ETS(Pop ~ error("A") +
trend("A") + season("N")),
`Damped Holt's method` = ETS(Pop ~ error("A") +
trend("Ad", phi = 0.9) + season("N"))
) |>
forecast(h = 15) |>
autoplot(aus_economy, level = NULL) +
labs(title = "Australian population",
y = "Millions") +
guides(colour = guide_legend(title = "Forecast"))
aus_holidays <- tourism |>
filter(Purpose == "Holiday") |>
summarise(Trips = sum(Trips)/1e3)
fit <- aus_holidays |>
model(
additive = ETS(Trips ~ error("A") + trend("A") +
season("A")),
multiplicative = ETS(Trips ~ error("M") + trend("A") +
season("M"))
)
fc <- fit |> forecast(h = "3 years")
fc |>
autoplot(aus_holidays, level = NULL) +
labs(title="Australian domestic tourism",
y="Overnight trips (millions)") +
guides(colour = guide_legend(title = "Forecast"))
tidy(fit)
accuracy(fc, aus_holidays)
accuracy(fit, aus_holidays)
accuracy(aus_holidays, fc)
accuracy(fc, aus_holidays)
fc
augment(fit)
augment(fit)$.fitted
accuracy(augment(fit)$.fitted, aus_holidays)
accuracy(augment(fit)$.fitted, aus_holidays$Trips)
fc
accuracy(fit)
accuracy(fit) %>% #<1>
select(RMSE)
accuracy(fit) %>% #<1>
select(round(RMSE))
accuracy(fit) %>% #<1>
select(RMSE)
accuracy(fit) %>% #<1>
select(RMSE) %>%
round
accuracy(fit) %>% #<1>
select(RMSE) %>%
round(2)
accuracy(fit) %>% #<1>
select(RMSE)
accuracy(fit) %>% #<1>
select(RMSE) %>%
round(5)
sth_cross_ped <- pedestrian |>
filter(Date >= "2016-07-01",
Sensor == "Southern Cross Station") |>
index_by(Date) |>
summarise(Count = sum(Count)/1000)
sth_cross_ped |>
filter(Date <= "2016-07-31") |>
model(
hw = ETS(Count ~ error("M") + trend("Ad") + season("M"))
) |>
forecast(h = "2 weeks") |>
autoplot(sth_cross_ped |> filter(Date <= "2016-08-14")) +
labs(title = "Daily traffic: Southern Cross",
y="Pedestrians ('000)")
accuracy(fit)# %>% #<1>
#select(RMSE)
accuracy(fit) %>% #<1>
select(.model, RMSE)
library(slider)
library(fpp3)
setwd("~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework4")
setwd("~/Desktop/UniTrento/Tutorato/Software R (English)/DAF/homeworks/Homework4")
library(readxl)
retail <- read_excel("retail.xlsx")
View(retail)
str(retail)
library(fpp3)
names(retail)
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;")
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = yearmonth(...1))
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = as.Date(...1))
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = as.Date(...1, origin))
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = as.Date(...1, origin = "1970-01-01"))
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = as.Date(...1, origin = as.Date("1970-01-01")))
library(readxl)
retail <- read_excel("retail.xlsx", col_types = c("date",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text"))
View(retail)
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;")
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = yearmonth(...1))
retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = yearmonth(...1)) %>%
select(-...1)
df_retail <- retail %>%
select(...1, "Turnover ;  New South Wales ;  Supermarket and grocery stores ;") %>%
mutate(month = yearmonth(...1)) %>%
select(-...1)
View(df_retail)
names(df_retail)
names(df_retail) <- c("series", "month")
nrow(df_retail)
df_retail[2:nrow(df_retail),]
df_cleaned <- df_retail[2:nrow(df_retail),]
View(df_cleaned)
is_tsibble(df_cleaned)
as_tsibble(df_cleaned, index = month)
df_cleaned <- as_tsibble(df_cleaned, index = month)
is_tsibble(df_cleaned)
autoplot(df_cleaned, series)
str(df_cleaned)
df_cleaned %>%
mutate(series = as.numeric(series))
df_cleaned <- df_cleaned %>%
mutate(series = as.numeric(series))
autoplot(df_cleaned, series)
View(df_retail)
df_cleaned %>%
model(HWM = ETS(series ~ error("M") + trend("A") + season("M")))
df_cleaned %>%
model(HWM = ETS(series ~ error("M") + trend("A") + season("M")),
HWD = ETS(series ~ error("M") + trend("Ad") + season("M")))
fit <- df_cleaned %>%
model(HWM = ETS(series ~ error("M") + trend("A") + season("M")),
HWD = ETS(series ~ error("M") + trend("Ad") + season("M")))
cv <- stretch_tsibble(df_cleaned, .init = 200, .step = 1)
View(cv)
cv <- stretch_tsibble(df_cleaned, .init = 200, .step = 4)
fore <- forecast(fit, cv)
fore <- forecast(cv, fit)
fit_hwm <- df_cleaned %>%
model(HWM = ETS(series ~ error("M") + trend("A") + season("M")))
fit_hwd <- df_cleaned %>%
model(HWD = ETS(series ~ error("M") + trend("Ad") + season("M")))
cv <- stretch_tsibble(df_cleaned, .init = 200, .step = 4)
fore <- forecast(fit_hwm, cv)
fore <- forecast(fit_hwm, cv, h = 1)
cv <- stretch_tsibble(df_cleaned, .init = 200, .step = 4)
fit_hwm <- cv %>%
model(HWM = ETS(series ~ error("M") + trend("A") + season("M")))
fit_hwd <- cv %>%
model(HWD = ETS(series ~ error("M") + trend("Ad") + season("M")))
fore <- forecast(fit_hwm, h = 1)
fore_hwm <- forecast(fit_hwm, h = 1)
fore_hwd <- forecast(fit_hwd, h = 1)
accuracy(fore_hwm)
accuracy(fore_hwm, cv)
accuracy(fore_hwm, df_cleaned)
accuracy(fore_hwd, df_cleaned)
accuracy(fore_hwm, df_cleaned)$RMSE
accuracy(fore_hwd, df_cleaned)$RMSE
augment(fit_hwm)
augment(fit_hwm) %>%
select(.resid, month) %>%
autoplot()
gg_tsresiduals(fore_hwd)
augment(fit_hwm) %>%
select(.resid, month) %>%
ACF(.resid)
augment(fit_hwm) %>%
select(.resid, month) %>%
ACF(.resid) %>%
autoplot()
augment(fit_hwm) %>%
select(.resid, month) %>%
ljung_box(.resid)
augment(fit_hwm) %>%
select(.resid, month) %>%
autoplot()
augment(fit_hwm) %>%
select(.resid, month) %>%
mean(.resid)
augment(fit_hwm) %>%
select(.innov, month) %>%
features(.innov, ljung_box, lag = 10)
augment(fit_hwm) %>%
select(.innov, month) %>%
features(.innov, ljung_box, lag = 12)
augment(fit_hwm) %>%
select(.innov, month) %>%
features(.innov, ljung_box, lag = 12)
fit_hwd_data <- df_cleaned %>%
model(HWD = ETS(series ~ error("M") + trend("Ad") + season("M")))
gg_tsresiduals(fit_hwd_data)
test_data <- filter_index(df_cleaned, "1982 Apr" ~ "2010 Dec")
View(test_data)
train_data <- filter_index(df_cleaned, "1982 Apr" ~ "2010 Dec")
test_data <- filter_index(df_cleaned, "2011 Jan" ~ "2013 Dec")
fit2 <- train_data %>%
model(
HW = ETS(HWM = ETS(series ~ error("M") + trend("A") + season("M"))),
seasonal_naive = SNAIVE(series, lag = 12)
)
d
fit2 <- train_data %>%
model(
HWM = ETS(series ~ error("M") + trend("A") + season("M")),
seasonal_naive = SNAIVE(series, lag = 12)
)
fore2 <- forecast(fit2, new_data = test_data)
accuracy(fore2, df_cleaned)
fore2 <- forecast(fit2, new_data = test_data)$RMSE
fit2 <- train_data %>%
model(
HWM = ETS(series ~ error("M") + trend("A") + season("M")),
seasonal_naive = SNAIVE(series, lag = 12)
)
fore2 <- forecast(fit2, new_data = test_data)
accuracy(fore2, df_cleaned)
fit2 <- train_data %>%
model(
HWM = ETS(series ~ error("M") + trend("A") + season("M")),
seasonal_naive = SNAIVE(series)
)
fore2 <- forecast(fit2, new_data = test_data)
accuracy(fore2, df_cleaned)
qt(.95, 9-1)
library(fpp3)
