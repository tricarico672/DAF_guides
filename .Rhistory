ENIret = mutate(ENItsib,close,ret=log(close)-log(lag(close)))
autoplot(ENIret,ret) + xlab('Time') # time plot
hist3 <- ggplot(ENIret, aes(ret)) +
geom_histogram(bins=20,color="black", fill="white") + xlab("ENI")
print(hist3) # histogram
p2 <- ggplot(ENIret, aes(x = ret)) +
geom_histogram(aes(y=after_stat(density)),bins = 20,
color="black", fill="white")
p2 <- p2 + stat_function(fun = dnorm, color = "red", n = 1000,
args = list(mean = mean(ENIret$ret,na.rm=TRUE),
sd = sd(ENIret$ret,na.rm=TRUE)))
print(p2) # normalized histogram and normal density
demo()
rm(list=ls())
library(fpp3)
Sys.setlocale(locale = "English")
gdppc <- mutate(global_economy, "GDP_per_capita" = GDP / Population)
list=ls()
help(rmÃ¹)
help(rm)
help(ls())
help(l
s)
help(ls)
ls()
rm(list=ls()) #used to clean the global environment
library(fpp3)
Sys.setlocale(locale = "English")
gdppc <- mutate(global_economy, "GDP_per_capita" = GDP / Population)
autoplot(filter(gdppc, Country == "Sweden"), GDP_per_capita) + #filter for Sweden only
labs(y = "$US", title = "GDP per capita for Sweden")
TSLM(GDP_per_capita ~ trend())
trend()
GDP_per_capita ~ trend()
TSLM(GDP_per_capita ~ trend())
summary(TSLM(GDP_per_capita ~ trend()))
summary(TSLM(GDP_per_capita ~ trend()))
View(gdppc)
trend(gdpcc)
fit <- model(gdppc, trend_model = TSLM(GDP_per_capita ~ trend()))
filter(gdppc,is.na(GDP_per_capita))
report(filter(fit,Country == 'Sweden')) # see output and evaluate
is_tsibble(gdppc)
gdpcc$trend()
gdppc$trend()
gdppc$trend
report(filter(fit,Country == 'Sweden')) # see output and evaluate
forecast(fit, h = "3 years")
fore <- filter(forecast(fit, h = "3 years"), Country == "Sweden")
View(fore)
View(fore[[4]][[1]])
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
recent_prod <- filter_index(aus_production, "1970 Q1" ~ "2004 Q4")
View(recent_prod)
bricks <- select(recent_prod,Bricks)
mean_fit <- model(bricks, MEAN(Bricks))
tidy(mean_fit)  # extract output (1)
results_list <- mean_fit$'MEAN(Bricks)'[[1]] # extract output (2)
mean_results <- results_list$fit
View(results_list)
fore <- filter(forecast(fit, h = "3 years"), Country == "Sweden")
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
View(fore)
fore <- filter(forecast(fit, h = "10 years"), Country == "Sweden")
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
fore <- filter(forecast(fit, h = "11 years"), Country == "Sweden")
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
fore <- filter(forecast(fit, h = "20 years"), Country == "Sweden")
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
fore <- filter(forecast(fit, h = "3 years"), Country == "Sweden")
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
autoplot(gdppc, fore) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
autoplot(fore, gdppc) + labs(y = "$US",
title = "GDP per capita for Sweden") # color='black'
mean_fc <- forecast(mean_fit, h = 12)
bricks_mean = mutate(bricks,hline=mean_fc$.mean[1]) # add a dashed line
autoplot(mean_fc, bricks, level = NULL) +
autolayer(bricks_mean,hline,linetype='dashed',color='blue')
View(mean_fc)
View(bricks_mean)
naive_fit <- model(bricks,NAIVE(Bricks))
naive_fc <- forecast(naive_fit, h = 12)
autoplot(naive_fc, bricks, level = NULL)
snaive_fit <- model(bricks,SNAIVE(Bricks ~ lag("year")))
snaive_fc <- forecast(snaive_fit, h = 12)
autoplot(snaive_fc, bricks, level = NULL)
drift_fit <- model(bricks,RW(Bricks ~ drift()))
drift_fc <- forecast(drift_fit, h = 12)
autoplot(drift_fc, bricks, level = NULL)
T <- length(bricks$Bricks)
b <- (bricks$Bricks[T] - bricks$Bricks[1])/(T - 1)
a <- bricks$Bricks[1]
b <- (bricks$Bricks[T] - bricks$Bricks[1])/(T - 1)
a <- bricks$Bricks[1]
y <- a + b * seq(1,T,by=1)
DashDR <- tibble(y,Date=bricks$Quarter)
DashDRts <- as_tsibble(DashDR,index=Date)
autoplot(drift_fc, bricks, level = NULL) +
autolayer(DashDRts,y,color='blue',linetype='dashed')
train <- filter_index(aus_production, "1992 Q1" ~ "2006 Q4") # Set training data from 1992 to 2006
beer_fit <- model(train, Mean = MEAN(Beer), Naive = NAIVE(Beer),
'Seasonal naive' = SNAIVE(Beer))# Fit the models (quotation marks needed for names with blanks)
beer_fc <- forecast(beer_fit, h = 14) # Generate forecasts for 14 quarters
autoplot(beer_fc, train, level = NULL) + # Plot forecasts against actual values
autolayer(filter_index(aus_production, "2007 Q1" ~ .),
colour = "black") + labs(y = "Megalitres", title = "Forecasts
for quarterly beer production") +
guides(colour = guide_legend(title = "Forecast"))
recent_GOOG <- filter(gafa_stock, Symbol == "GOOG",
year(Date) >= 2015)
goog <- mutate(recent_GOOG, day = row_number())
google_stock <- update_tsibble(goog, index = day, regular = TRUE)
google_2015 <- filter(google_stock, year(Date) == 2015) # Filter the year of interest
google_fit <- model(google_2015, # Fit the models
Mean = MEAN(Close), Naive = NAIVE(Close),
Drift = NAIVE(Close ~ drift()))
google_jan_2016 <- filter(google_stock,
yearmonth(Date) == yearmonth("2016 Jan")) # Produce forecasts for the trading days in January 2016
google_fc <- forecast(google_fit, new_data = google_jan_2016)
# Plot the forecasts
autoplot(google_fc, google_2015, level = NULL) +
autolayer(google_jan_2016, Close, colour = "black") +
labs(y = "$US", title = "Google daily closing stock prices",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "Forecast"))
augment(beer_fit)
beer_fit1 <- model(train, SNAIVE(Beer))
mean_fitted <- augment(beer_fit1) # fitted values for a single method
ggplot(mean_fitted, aes(x = Quarter)) +
geom_line(aes(y = Beer),color='black') +
geom_line(aes(y = .fitted),color='red')
autoplot(mean_fitted,.vars = Beer) + # alternative command
autolayer(mean_fitted,.fitted,color='red')
gg_tsresiduals(beer_fit1)
augment(beer_fit)
ggplot(accuracy(fc, google_2015, by = c("h", ".model")),
aes(x = h, y = RMSE)) + geom_point() # display average RMSE over all training sets
library(tidyquant)
GOOGdata <- tq_get("GOOG",get="stock.prices",from="2017-01-01",to="2023-08-31")
temp <- select(GOOGdata,"date","close")
library(dplyr)
library(tidyquant)
GOOGdata <- tq_get("GOOG",get="stock.prices",from="2017-01-01",to="2023-08-31")
temp <- select(GOOGdata,"date","close")
GOOGtsib <- as_tsibble(temp, index = date)
library(fpp3)
library(tidyquant)
GOOGdata <- tq_get("GOOG",get="stock.prices",from="2017-01-01",to="2023-08-31")
temp <- select(GOOGdata,"date","close")
GOOGtsib <- as_tsibble(temp, index = date)
GOOGtsib = mutate(GOOGtsib,close,diff=close-lag(close))
library(gridExtra)
p231 <- autoplot(as_tsibble(fma::hsales, index = date)) + # sales of new one-family houses, USA
ggtitle("Sales of new one-family houses, USA") +
ylab("millions") + xlab("Year")
p232 <- autoplot(as_tsibble(fma::ustreas)) +  # US treasury bill contracts
ggtitle("US treasury bill contracts") +
ylab("Number") + xlab("Day")
p233 <- autoplot(select(aus_production, Electricity)) + # the "Details" section in the help reports a wrong frequencey            # Australian quarterly electricity production
ggtitle("Australian quarterly electricity production") +
ylab("billion kWh") + xlab("Quarter")
p234 <- autoplot(GOOGtsib,diff) +    # Daily closing stock prices of Google Inc
ggtitle("Daily differences of Google closing prices") +
ylab("Change in prices") + xlab("Day")
grid.arrange(p231,p232,p233,p234,nrow=2)
grid.arrange(p231,p232,p233,p234,nrow=4)
grid.arrange(p231,p232,p233,p234,ncol=4)
grid.arrange(p231,p232,p233,p234,nrow=2)
set.seed(30)
y <- tsibble(sample = 1:50, wn = rnorm(50), index = sample)
autoplot(y,wn) + labs(title = "White noise", y = "")
autoplot(ACF(y,wn)) + labs(title = "White noise")
var <- c(1,1,1,2,2,2,3,4,5,6,7,8,9)
var_skewed <- c(1,1,1,1,2,3,4,10000000) #notice the extreme value at the end of this!
mean(var)
mean(var_skewed)
var <- c(1,1,1,2,2,2,3,4,5,6,7,8,9)
var_skewed <- c(1,1,1,1,2,3,4,10000000) #notice the extreme value at the end of this!
mean(var) #<1>
1. mean of the non-skewed variable
var <- c(1,1,1,2,2,2,3,4,5,6,7,8,9)
var_skewed <- c(1,1,1,1,2,3,4,10000000) #notice the extreme value at the end of this!
mean(var) #<1>
hist(var)
hist(var_skewed)
hist(var, main = "non-skewed")
hist(var, main = "Non-skewed")
abline(v = mean(var))
hist(var, main = "Non-skewed")
abline(v = mean(var))
abline(v = mean(var), col="red")
hist(var, main = "Non-skewed")
abline(v = mean(var), col="red")
hist(var, main = "Non-skewed")
abline(v = mean(var), col="red". lwd=3)
hist(var, main = "Non-skewed")
abline(v = mean(var), col="red", lwd=3)
hist(var_skewed)
abline(v = mean(var_skewed), col="red", lwd=3)
hist(var_skewed, breaks = seq(1,max(var_skewed)))
hist(var_skewed, bins = 30)
abline(v = mean(var_skewed), col="red", lwd=3)
hist(var_skewed, breaks = 30)
abline(v = mean(var_skewed), col="red", lwd=3)
hist(var, main = "Non-skewed")
abline(v = median(var), col="red", lwd=3)
hist(var_skewed, breaks = 30)
abline(v = median(var_skewed), col="red", lwd=3)
median(var)
median(var_skewed)
mode(var)
table(var)
table(var_skewed)
var(var)
var(var_skewed)
sd(var)
sd(var_skewed)
rbinom(100,100,1/6)
observed_outcomes
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(outcomes, size = 100, replace = T)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T)
observed_outcomes
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T)
observed_outcomes
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T)
hist(observed_outcomes)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T)
hist(observed_outcomes, breaks = 6)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 1000, replace = T)
hist(observed_outcomes, breaks = 6)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100000, replace = T)
hist(observed_outcomes, breaks = 6)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100000, replace = T)
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T)
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = (1/6,1/6,1/6,1/6,1/6,1/6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(2/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,4/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 1000000, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 1, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 10, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = 6, kde = T)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = 6)
dbinom(2,100,1/6)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
table(observed_outcomes)
table(observed_outcomes)[2,]
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
table(observed_outcomes)[,]
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
table(observed_outcomes)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
as.data.frame(table(observed_outcomes))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$observed_outcomes)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$observed_outcomes)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq, breaks = 4)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq, breaks = 3)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
barplot(frequencies$Freq)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 10, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 20, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 20, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
frequencies <- as.data.frame(table(observed_outcomes))
hist(frequencies$Freq)
frequencies$Freq
# Set the probability of rolling a "2" in a fair die
p <- 1/6
# Number of throws
n <- 100
# Simulate the count of "1"s in each of 100 throws
num_ones <- rbinom(100, size = 2, prob = p)
# Plot histogram to see the binomial distribution of counts of "1"s
hist(num_ones, main = "Binomial Distribution of Rolling '1' in 100 Throws", xlab = "Count of '1's", ylab = "Frequency", col = "lightgreen")
# Set the probability of rolling a "2" in a fair die
p <- 1/6
# Number of throws
n <- 100
# Simulate the count of "1"s in each of 100 throws
num_ones <- rbinom(100, size = 2, prob = p)
# Plot histogram to see the binomial distribution of counts of "1"s
hist(num_ones, main = "Binomial Distribution of Rolling '2' in 100 Throws", xlab = "Count of '2's", ylab = "Frequency", col = "lightgreen")
# Set the probability of rolling a "2" in a fair die
p <- 1/6
# Number of throws
n <- 100
# Simulate the count of "1"s in each of 100 throws
num_ones <- rbinom(100, size = 3, prob = p)
# Plot histogram to see the binomial distribution of counts of "1"s
hist(num_ones, main = "Binomial Distribution of Rolling '2' in 100 Throws", xlab = "Count of '2's", ylab = "Frequency", col = "lightgreen")
# Set the probability of rolling a "2" in a fair die
p <- 1/6
# Number of throws
n <- 100
# Simulate the count of "1"s in each of 100 throws
num_ones <- rbinom(100, size = 3, prob = p)
# Plot histogram to see the binomial distribution of counts of "1"s
hist(num_ones, main = "Binomial Distribution of Rolling '2' in 100 Throws", xlab = "Count of '2's", ylab = "Frequency", col = "lightgreen", breaks = 6)
# Set the probability of rolling a "2" in a fair die
p <- 1/6
# Number of throws
n <- 100
# Simulate the count of "1"s in each of 100 throws
num_ones <- rbinom(100, size = 3, prob = p)
# Plot histogram to see the binomial distribution of counts of "1"s
hist(num_ones, main = "Binomial Distribution of Rolling '2' in 100 Throws", xlab = "Count of '2's", ylab = "Frequency", col = "lightgreen", breaks = 3)
# Set the probability of rolling a "2" in a fair die
p <- 1/6
# Number of throws
n <- 100
# Simulate the count of "1"s in each of 100 throws
num_ones <- rbinom(100, size = 9, prob = p)
# Plot histogram to see the binomial distribution of counts of "1"s
hist(num_ones, main = "Binomial Distribution of Rolling '2' in 100 Throws", xlab = "Count of '2's", ylab = "Frequency", col = "lightgreen", breaks = 3)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(2,3,4,5))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), include.lowest = F)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), include.lowest = T)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), freq = F)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), freq = F, density = T)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), freq = F, labels = T)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), freq = F)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), freq = F, labels = T)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100, replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), freq = F, labels = T, ylim = c(0,.4))
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100,
replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(1,2,3,4,5,6), freq = F,
labels = T, ylim = c(0,.4))
table(observed_outcomes)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100,
replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(0,1,2,3,4,5,6), freq = F,
labels = T, ylim = c(0,.4))
table(observed_outcomes)
set.seed(126)
possible_outcomes <- seq(1,6)
observed_outcomes <- sample(possible_outcomes, size = 100,
replace = T, prob = c(1/6,1/6,1/6,1/6,1/6,1/6))
hist(observed_outcomes, breaks = c(0,1,2,3,4,5,6), freq = F,
labels = T, ylim = c(0,.3))
table(observed_outcomes)
x <- seq(-4,4,.001)
y <- dnorm(x)
plot(x,y)
x <- seq(-4,4,.001)
y <- dnorm(x)
plot(x,y, main = "The Standard Normal Distribution")
x <- seq(-4,4,.001)
y <- dnorm(x)
plot(x,y, main = "The Standard Normal Distribution")
abline(v=mean(x))
x <- seq(-4,4,.001)
y <- dnorm(x)
plot(x,y, main = "The Standard Normal Distribution")
abline(v=mean(x), col = "red", lwd=2)
